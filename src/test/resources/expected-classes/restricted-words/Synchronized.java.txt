package com.kobylynskyi.graphql.codegen.prot;

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLRequestSerializer;
import java.util.Objects;
import java.util.StringJoiner;

@javax.annotation.Generated(
    value = "com.kobylynskyi.graphql.codegen.GraphQLCodegen",
    date = "2020-12-31T23:59:59-0500"
)
public class Synchronized implements java.io.Serializable {

    private String Void;
    private Char wait;

    public Synchronized() {
    }

    public Synchronized(String Void, Char wait) {
        this.Void = Void;
        this.wait = wait;
    }

    public String getVoid() {
        return Void;
    }
    public void setVoid(String Void) {
        this.Void = Void;
    }

    public Char getWait() {
        return wait;
    }
    public void setWait(Char wait) {
        this.wait = wait;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        final Synchronized that = (Synchronized) obj;
        return Objects.equals(Void, that.Void)
            && Objects.equals(wait, that.wait);
    }

    @Override
    public int hashCode() {
        return Objects.hash(Void, wait);
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(", ", "{ ", " }");
        if (Void != null) {
            joiner.add("void: " + GraphQLRequestSerializer.getEntry(Void));
        }
        if (wait != null) {
            joiner.add("wait: " + GraphQLRequestSerializer.getEntry(wait));
        }
        return joiner.toString();
    }

    public static Synchronized.Builder builder() {
        return new Synchronized.Builder();
    }

    public static class Builder {

        private String Void;
        private Char wait;

        public Builder() {
        }

        public Builder setVoid(String Void) {
            this.Void = Void;
            return this;
        }

        public Builder setWait(Char wait) {
            this.wait = wait;
            return this;
        }


        public Synchronized build() {
            return new Synchronized(Void, wait);
        }

    }
}