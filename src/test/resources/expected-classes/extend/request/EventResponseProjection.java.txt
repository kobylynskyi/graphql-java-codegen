import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseField;
import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseProjection;

/**
 * Response projection for Event
 */
@javax.annotation.Generated(
    value = "com.kobylynskyi.graphql.codegen.GraphQLCodegen",
    date = "2020-12-31T23:59:59-0500"
)
public class EventResponseProjection extends GraphQLResponseProjection {

    public EventResponseProjection() {
    }

    @Override
    public EventResponseProjection all$() {
        return all$(3);
    }

    @Override
    public EventResponseProjection all$(int maxDepth) {
        this.status();
        this.createdDateTime();
        if (projectionDepthOnFields.getOrDefault("EventResponseProjection.AssetResponseProjection.assets", 0) <= maxDepth) {
            projectionDepthOnFields.put("EventResponseProjection.AssetResponseProjection.assets", projectionDepthOnFields.getOrDefault("EventResponseProjection.AssetResponseProjection.assets", 0) + 1);
            this.assets(new AssetResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrDefault("EventResponseProjection.AssetResponseProjection.assets", 0)));
        }
        this.id();
        this.createdBy();
        this.typename();
        return this;
    }

    public EventResponseProjection status() {
        return status(null);
    }

    public EventResponseProjection status(String alias) {
        fields.add(new GraphQLResponseField("status").alias(alias));
        return this;
    }

    public EventResponseProjection createdDateTime() {
        return createdDateTime(null);
    }

    public EventResponseProjection createdDateTime(String alias) {
        fields.add(new GraphQLResponseField("createdDateTime").alias(alias));
        return this;
    }

    public EventResponseProjection assets(AssetResponseProjection subProjection) {
        return assets(null, subProjection);
    }

    public EventResponseProjection assets(String alias, AssetResponseProjection subProjection) {
        fields.add(new GraphQLResponseField("assets").alias(alias).projection(subProjection));
        return this;
    }

    public EventResponseProjection id() {
        return id(null);
    }

    public EventResponseProjection id(String alias) {
        fields.add(new GraphQLResponseField("id").alias(alias));
        return this;
    }

    public EventResponseProjection createdBy() {
        return createdBy(null);
    }

    public EventResponseProjection createdBy(String alias) {
        fields.add(new GraphQLResponseField("createdBy").alias(alias));
        return this;
    }

    public EventResponseProjection typename() {
        return typename(null);
    }

    public EventResponseProjection typename(String alias) {
        fields.add(new GraphQLResponseField("__typename").alias(alias));
        return this;
    }


}