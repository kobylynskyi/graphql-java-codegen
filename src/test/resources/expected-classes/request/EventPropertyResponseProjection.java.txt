package com.github.graphql;

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseField;
import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseProjection;
import java.util.Objects;

/**
 * Response projection for EventProperty
 */
@javax.annotation.Generated(
    value = "com.kobylynskyi.graphql.codegen.GraphQLCodegen",
    date = "2020-12-31T23:59:59-0500"
)
public class EventPropertyResponseProjection extends GraphQLResponseProjection {

    public EventPropertyResponseProjection() {
    }

    @Override
    public EventPropertyResponseProjection all$() {
        return all$(3);
    }

    @Override
    public EventPropertyResponseProjection all$(int maxDepth) {
        this.floatVal();
        this.booleanVal();
        this.intVal();
        this.intVals();
        this.stringVal();
        if (projectionDepthOnFields.getOrDefault("EventPropertyResponseProjection.EventPropertyResponseProjection.child", 0) <= maxDepth) {
            projectionDepthOnFields.put("EventPropertyResponseProjection.EventPropertyResponseProjection.child", projectionDepthOnFields.getOrDefault("EventPropertyResponseProjection.EventPropertyResponseProjection.child", 0) + 1);
            this.child(new EventPropertyResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrDefault("EventPropertyResponseProjection.EventPropertyResponseProjection.child", 0)));
        }
        if (projectionDepthOnFields.getOrDefault("EventPropertyResponseProjection.EventResponseProjection.parent", 0) <= maxDepth) {
            projectionDepthOnFields.put("EventPropertyResponseProjection.EventResponseProjection.parent", projectionDepthOnFields.getOrDefault("EventPropertyResponseProjection.EventResponseProjection.parent", 0) + 1);
            this.parent(new EventResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrDefault("EventPropertyResponseProjection.EventResponseProjection.parent", 0)));
        }
        this.typename();
        return this;
    }

    public EventPropertyResponseProjection floatVal() {
        return floatVal(null);
    }

    public EventPropertyResponseProjection floatVal(String alias) {
        fields.add(new GraphQLResponseField("floatVal").alias(alias));
        return this;
    }

    public EventPropertyResponseProjection booleanVal() {
        return booleanVal(null);
    }

    public EventPropertyResponseProjection booleanVal(String alias) {
        fields.add(new GraphQLResponseField("booleanVal").alias(alias));
        return this;
    }

    public EventPropertyResponseProjection intVal() {
        return intVal(null);
    }

    public EventPropertyResponseProjection intVal(String alias) {
        fields.add(new GraphQLResponseField("intVal").alias(alias));
        return this;
    }

    public EventPropertyResponseProjection intVals() {
        return intVals(null);
    }

    public EventPropertyResponseProjection intVals(String alias) {
        fields.add(new GraphQLResponseField("intVals").alias(alias));
        return this;
    }

    public EventPropertyResponseProjection stringVal() {
        return stringVal(null);
    }

    public EventPropertyResponseProjection stringVal(String alias) {
        fields.add(new GraphQLResponseField("stringVal").alias(alias));
        return this;
    }

    public EventPropertyResponseProjection child(EventPropertyResponseProjection subProjection) {
        return child((String)null, subProjection);
    }

    public EventPropertyResponseProjection child(String alias, EventPropertyResponseProjection subProjection) {
        fields.add(new GraphQLResponseField("child").alias(alias).projection(subProjection));
        return this;
    }

    public EventPropertyResponseProjection child(EventPropertyChildParametrizedInput input, EventPropertyResponseProjection subProjection) {
        return child(null, input, subProjection);
    }

    public EventPropertyResponseProjection child(String alias, EventPropertyChildParametrizedInput input, EventPropertyResponseProjection subProjection) {
        fields.add(new GraphQLResponseField("child").alias(alias).parameters(input).projection(subProjection));
        return this;
    }

    public EventPropertyResponseProjection parent(EventResponseProjection subProjection) {
        return parent((String)null, subProjection);
    }

    public EventPropertyResponseProjection parent(String alias, EventResponseProjection subProjection) {
        fields.add(new GraphQLResponseField("parent").alias(alias).projection(subProjection));
        return this;
    }

    public EventPropertyResponseProjection parent(EventPropertyParentParametrizedInput input, EventResponseProjection subProjection) {
        return parent(null, input, subProjection);
    }

    public EventPropertyResponseProjection parent(String alias, EventPropertyParentParametrizedInput input, EventResponseProjection subProjection) {
        fields.add(new GraphQLResponseField("parent").alias(alias).parameters(input).projection(subProjection));
        return this;
    }

    public EventPropertyResponseProjection typename() {
        return typename(null);
    }

    public EventPropertyResponseProjection typename(String alias) {
        fields.add(new GraphQLResponseField("__typename").alias(alias));
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        final EventPropertyResponseProjection that = (EventPropertyResponseProjection) obj;
        return Objects.equals(fields, that.fields);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fields);
    }

}