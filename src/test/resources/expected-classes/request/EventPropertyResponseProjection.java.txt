package com.github.graphql;

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseProjection;
import java.util.Objects;

/**
 * Response projection for EventProperty
 */
public class EventPropertyResponseProjection extends GraphQLResponseProjection {

    public EventPropertyResponseProjection() {
    }

    public EventPropertyResponseProjection floatVal() {
        fields.put("floatVal", null);
        return this;
    }

    public EventPropertyResponseProjection booleanVal() {
        fields.put("booleanVal", null);
        return this;
    }

    public EventPropertyResponseProjection intVal() {
        fields.put("intVal", null);
        return this;
    }

    public EventPropertyResponseProjection stringVal() {
        fields.put("stringVal", null);
        return this;
    }

    public EventPropertyResponseProjection child(EventPropertyResponseProjection subProjection) {
        fields.put("child", subProjection);
        return this;
    }

    public EventPropertyResponseProjection child(EventPropertyChildParametrizedInput input, EventPropertyResponseProjection subProjection) {
        parametrizedInputs.put("child", input);
        return child(subProjection);
    }

    public EventPropertyResponseProjection parent(EventResponseProjection subProjection) {
        fields.put("parent", subProjection);
        return this;
    }

    public EventPropertyResponseProjection parent(EventPropertyParentParametrizedInput input, EventResponseProjection subProjection) {
        parametrizedInputs.put("parent", input);
        return parent(subProjection);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        final EventPropertyResponseProjection that = (EventPropertyResponseProjection) obj;
        return Objects.equals(fields, that.fields) && Objects.equals(parametrizedInputs, that.parametrizedInputs);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fields, parametrizedInputs);
    }

}