package com.github.graphql;

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLOperation;
import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLOperationRequest;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Events by IDs.
 */
public class EventsByIdsQueryRequest implements GraphQLOperationRequest {

    private static final GraphQLOperation OPERATION_TYPE = GraphQLOperation.QUERY;
    private static final String OPERATION_NAME = "eventsByIds";

    private Map<String, Object> input = new LinkedHashMap<>();

    public EventsByIdsQueryRequest() {
    }

    public void setIds(java.util.Collection<String> ids) {
        this.input.put("ids", ids);
    }

    @Override
    public GraphQLOperation getOperationType() {
        return OPERATION_TYPE;
    }

    @Override
    public String getOperationName() {
        return OPERATION_NAME;
    }

    @Override
    public Map<String, Object> getInput() {
        return input;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        final EventsByIdsQueryRequest that = (EventsByIdsQueryRequest) obj;
        return Objects.equals(getOperationType(), that.getOperationType()) &&
                   Objects.equals(getOperationName(), that.getOperationName()) &&
                   Objects.equals(input, that.input);
    }

    @Override
    public int hashCode() {
        return Objects.hash(getOperationType(), getOperationName(), input);
    }
    @Override
    public String toString() {
        return Objects.toString(input);
    }

    public static class Builder {

        private java.util.Collection<String> ids;

        public Builder() {
        }

        public Builder setIds(java.util.Collection<String> ids) {
            this.ids = ids;
            return this;
        }


        public EventsByIdsQueryRequest build() {
            EventsByIdsQueryRequest obj = new EventsByIdsQueryRequest();
            obj.setIds(ids);
            return obj;
        }

    }
}