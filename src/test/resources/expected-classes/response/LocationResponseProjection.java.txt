package com.github.graphql;

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseField;
import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseProjection;
import java.util.HashMap;
import java.util.Map;

/**
 * Response projection for Location
 */
@javax.annotation.Generated(
    value = "com.kobylynskyi.graphql.codegen.GraphQLCodegen",
    date = "2020-12-31T23:59:59-0500"
)
public class LocationResponseProjection extends GraphQLResponseProjection {

    private final Map<String, Integer> projectionDepthOnFields = new HashMap<>();

    public LocationResponseProjection() {
    }

    public LocationResponseProjection all$() {
        return all$(3);
    }

    public LocationResponseProjection all$(int maxDepth) {
        this.id();
        this.locationType();
        this.typename();
        return this;
    }

    public LocationResponseProjection id() {
        return id(null);
    }

    public LocationResponseProjection id(String alias) {
        fields.add(new GraphQLResponseField("id").alias(alias));
        return this;
    }

    public LocationResponseProjection locationType() {
        return locationType(null);
    }

    public LocationResponseProjection locationType(String alias) {
        fields.add(new GraphQLResponseField("locationType").alias(alias));
        return this;
    }

    public LocationResponseProjection onCustomerLocation(CustomerLocationResponseProjection subProjection) {
        return onCustomerLocation(null, subProjection);
    }

    public LocationResponseProjection onCustomerLocation(String alias, CustomerLocationResponseProjection subProjection) {
        fields.add(new GraphQLResponseField("...on CustomerLocation").alias(alias).projection(subProjection));
        return this;
    }

    public LocationResponseProjection onDealerLocation(DealerLocationResponseProjection subProjection) {
        return onDealerLocation(null, subProjection);
    }

    public LocationResponseProjection onDealerLocation(String alias, DealerLocationResponseProjection subProjection) {
        fields.add(new GraphQLResponseField("...on DealerLocation").alias(alias).projection(subProjection));
        return this;
    }

    public LocationResponseProjection typename() {
        return typename(null);
    }

    public LocationResponseProjection typename(String alias) {
        fields.add(new GraphQLResponseField("__typename").alias(alias));
        return this;
    }


}
