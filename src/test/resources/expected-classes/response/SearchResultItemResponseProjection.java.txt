package com.github.graphql;

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseField;
import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseProjection;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

/**
 * Response projection for SearchResultItem
 */
@javax.annotation.Generated(
    value = "com.kobylynskyi.graphql.codegen.GraphQLCodegen",
    date = "2020-12-31T23:59:59-0500"
)
public class SearchResultItemResponseProjection extends GraphQLResponseProjection {

    private final Map<String, Integer> projectionDepthOnFields = new HashMap<>();

    public SearchResultItemResponseProjection() {
    }

    public SearchResultItemResponseProjection(SearchResultItemResponseProjection projection) {
        super(projection);
    }

    public SearchResultItemResponseProjection(List<SearchResultItemResponseProjection> projections) {
        super(projections);
    }

    public SearchResultItemResponseProjection all$() {
        return all$(3);
    }

    public SearchResultItemResponseProjection all$(int maxDepth) {
        if (projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.AppResponseProjection.onApp", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.AppResponseProjection.onApp", projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.AppResponseProjection.onApp", 0) + 1);
            this.onApp(new AppResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.AppResponseProjection.onApp", 0)));
        }
        if (projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.RepositoryResponseProjection.onRepository", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.RepositoryResponseProjection.onRepository", projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.RepositoryResponseProjection.onRepository", 0) + 1);
            this.onRepository(new RepositoryResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.RepositoryResponseProjection.onRepository", 0)));
        }
        if (projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.IssueResponseProjection.onIssue", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.IssueResponseProjection.onIssue", projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.IssueResponseProjection.onIssue", 0) + 1);
            this.onIssue(new IssueResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.IssueResponseProjection.onIssue", 0)));
        }
        if (projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.OrganizationResponseProjection.onOrganization", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.OrganizationResponseProjection.onOrganization", projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.OrganizationResponseProjection.onOrganization", 0) + 1);
            this.onOrganization(new OrganizationResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.OrganizationResponseProjection.onOrganization", 0)));
        }
        if (projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.UserResponseProjection.onUser", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.UserResponseProjection.onUser", projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.UserResponseProjection.onUser", 0) + 1);
            this.onUser(new UserResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.UserResponseProjection.onUser", 0)));
        }
        if (projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.MarketplaceListingResponseProjection.onMarketplaceListing", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.MarketplaceListingResponseProjection.onMarketplaceListing", projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.MarketplaceListingResponseProjection.onMarketplaceListing", 0) + 1);
            this.onMarketplaceListing(new MarketplaceListingResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.MarketplaceListingResponseProjection.onMarketplaceListing", 0)));
        }
        if (projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.PullRequestResponseProjection.onPullRequest", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.PullRequestResponseProjection.onPullRequest", projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.PullRequestResponseProjection.onPullRequest", 0) + 1);
            this.onPullRequest(new PullRequestResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrDefault("SearchResultItemResponseProjection.PullRequestResponseProjection.onPullRequest", 0)));
        }
        this.typename();
        return this;
    }

    public SearchResultItemResponseProjection onApp(AppResponseProjection subProjection) {
        return onApp(null, subProjection);
    }

    public SearchResultItemResponseProjection onApp(String alias, AppResponseProjection subProjection) {
        add$(new GraphQLResponseField("...on App").alias(alias).projection(subProjection));
        return this;
    }

    public SearchResultItemResponseProjection onRepository(RepositoryResponseProjection subProjection) {
        return onRepository(null, subProjection);
    }

    public SearchResultItemResponseProjection onRepository(String alias, RepositoryResponseProjection subProjection) {
        add$(new GraphQLResponseField("...on Repository").alias(alias).projection(subProjection));
        return this;
    }

    public SearchResultItemResponseProjection onIssue(IssueResponseProjection subProjection) {
        return onIssue(null, subProjection);
    }

    public SearchResultItemResponseProjection onIssue(String alias, IssueResponseProjection subProjection) {
        add$(new GraphQLResponseField("...on Issue").alias(alias).projection(subProjection));
        return this;
    }

    public SearchResultItemResponseProjection onOrganization(OrganizationResponseProjection subProjection) {
        return onOrganization(null, subProjection);
    }

    public SearchResultItemResponseProjection onOrganization(String alias, OrganizationResponseProjection subProjection) {
        add$(new GraphQLResponseField("...on Organization").alias(alias).projection(subProjection));
        return this;
    }

    public SearchResultItemResponseProjection onUser(UserResponseProjection subProjection) {
        return onUser(null, subProjection);
    }

    public SearchResultItemResponseProjection onUser(String alias, UserResponseProjection subProjection) {
        add$(new GraphQLResponseField("...on User").alias(alias).projection(subProjection));
        return this;
    }

    public SearchResultItemResponseProjection onMarketplaceListing(MarketplaceListingResponseProjection subProjection) {
        return onMarketplaceListing(null, subProjection);
    }

    public SearchResultItemResponseProjection onMarketplaceListing(String alias, MarketplaceListingResponseProjection subProjection) {
        add$(new GraphQLResponseField("...on MarketplaceListing").alias(alias).projection(subProjection));
        return this;
    }

    public SearchResultItemResponseProjection onPullRequest(PullRequestResponseProjection subProjection) {
        return onPullRequest(null, subProjection);
    }

    public SearchResultItemResponseProjection onPullRequest(String alias, PullRequestResponseProjection subProjection) {
        add$(new GraphQLResponseField("...on PullRequest").alias(alias).projection(subProjection));
        return this;
    }

    public SearchResultItemResponseProjection typename() {
        return typename(null);
    }

    public SearchResultItemResponseProjection typename(String alias) {
        add$(new GraphQLResponseField("__typename").alias(alias));
        return this;
    }

    @Override
    public SearchResultItemResponseProjection deepCopy$() {
        return new SearchResultItemResponseProjection(this);
    }


}