package com.kobylynskyi.graphql.codegen.prot

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLRequestSerializer
import TestEnum._

@javax.annotation.Generated(
    value = Array("com.kobylynskyi.graphql.codegen.GraphQLCodegen"),
    date = "2020-12-31T23:59:59-0500"
)
case class Synchronized(
    val void: String,
    val wait: Char,
    val `this`: Char,
    val `super`: Char,
    val `private`: Char,
    val native: Char,
    val that: Char,
    val enum: TestEnum,
    val Synchronized: Synchronized,
    val date: java.time.ZonedDateTime
) {

    override def toString(): String = {
        Seq(
            if (void != null) "void: " + GraphQLRequestSerializer.getEntry(void) else "",
            "wait: " + GraphQLRequestSerializer.getEntry(wait),
            "this: " + GraphQLRequestSerializer.getEntry(`this`),
            "super: " + GraphQLRequestSerializer.getEntry(`super`),
            "private: " + GraphQLRequestSerializer.getEntry(`private`),
            "native: " + GraphQLRequestSerializer.getEntry(native),
            "that: " + GraphQLRequestSerializer.getEntry(that),
            if (enum != null) "enum: " + GraphQLRequestSerializer.getEntry(enum, true) else "",
            if (Synchronized != null) "Synchronized: " + GraphQLRequestSerializer.getEntry(Synchronized) else "",
            if (date != null) "date: " + GraphQLRequestSerializer.getEntry(date) else ""
        ).filter(_ != "").mkString("{", ",", "}")
    }
}

object Synchronized {

    def builder(): Synchronized.Builder = new Builder()

    class Builder {

        private var void: String = _
        private var wait: Char = _
        private var `this`: Char = _
        private var `super`: Char = _
        private var `private`: Char = _
        private var native: Char = _
        private var that: Char = _
        private var enum: TestEnum = _
        private var Synchronized: Synchronized = _
        private var date: java.time.ZonedDateTime = _

        def setVoid(void: String): Builder = {
            this.void = void
            this
        }

        def setWait(wait: Char): Builder = {
            this.wait = wait
            this
        }

        def setThis(`this`: Char): Builder = {
            this.`this` = `this`
            this
        }

        def setSuper(`super`: Char): Builder = {
            this.`super` = `super`
            this
        }

        def setPrivate(`private`: Char): Builder = {
            this.`private` = `private`
            this
        }

        def setNative(native: Char): Builder = {
            this.native = native
            this
        }

        def setThat(that: Char): Builder = {
            this.that = that
            this
        }

        def setEnum(enum: TestEnum): Builder = {
            this.enum = enum
            this
        }

        def setSynchronized(Synchronized: Synchronized): Builder = {
            this.Synchronized = Synchronized
            this
        }

        def setDate(date: java.time.ZonedDateTime): Builder = {
            this.date = date
            this
        }

        def build(): Synchronized = Synchronized(void, wait, `this`, `super`, `private`, native, that, enum, Synchronized, date)

    }
}