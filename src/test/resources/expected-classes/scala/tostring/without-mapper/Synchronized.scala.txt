package com.kobylynskyi.graphql.codegen.prot

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLRequestSerializer
import TestEnum._
import Synchronized._

@javax.annotation.Generated(
    value = Array("com.kobylynskyi.graphql.codegen.GraphQLCodegen"),
    date = "2020-12-31T23:59:59-0500"
)
case class Synchronized(
    val void: String,
    val wait: Char,
    val This: Char,
    val Super: Char,
    val Private: Char,
    val native: Char,
    val that: Char,
    val enum: TestEnum,
    val Synchronized: Synchronized,
    val date: String
) {

    override def toString(): String = {
        Seq(
            if (void != null) "void: " + GraphQLRequestSerializer.getEntry(void) else "",
            "wait: " + GraphQLRequestSerializer.getEntry(wait),
            "this: " + GraphQLRequestSerializer.getEntry(This),
            "super: " + GraphQLRequestSerializer.getEntry(Super),
            "private: " + GraphQLRequestSerializer.getEntry(Private),
            "native: " + GraphQLRequestSerializer.getEntry(native),
            "that: " + GraphQLRequestSerializer.getEntry(that),
            if (enum != null) "enum: " + GraphQLRequestSerializer.getEntry(enum) else "",
            if (Synchronized != null) "Synchronized: " + GraphQLRequestSerializer.getEntry(Synchronized) else "",
            if (date != null) "date: " + GraphQLRequestSerializer.getEntry(date) else ""
        ).filter(_ != "").mkString("{", ",", "}")
    }
}

