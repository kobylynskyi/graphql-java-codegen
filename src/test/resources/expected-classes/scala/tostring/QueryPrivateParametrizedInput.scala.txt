package com.kobylynskyi.graphql.codegen.prot

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLParametrizedInput
import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLRequestSerializer
import scala.collection.JavaConverters._
import TestEnum._

/**
 * Parametrized input for field private in type Query
 */
@javax.annotation.Generated(
    value = Array("com.kobylynskyi.graphql.codegen.GraphQLCodegen"),
    date = "2020-12-31T23:59:59-0500"
)
case class QueryPrivateParametrizedInput(
    int: Int,
    intOpt: scala.Option[Int],
    seq1: scala.Seq[scala.Option[Int]],
    seq2: scala.Seq[Int],
    `new`: String,
    enum: TestEnum = TestEnum.long,
    createdAfter: java.time.ZonedDateTime
) extends GraphQLParametrizedInput {

    override def toString(): String = {
        scala.Seq(
            "int: " + GraphQLRequestSerializer.getEntry(int),
            if (intOpt.isDefined) "intOpt: " + GraphQLRequestSerializer.getEntry(intOpt.get) else "",
            if (seq1 != null) "seq1: " + GraphQLRequestSerializer.getEntry(seq1.asJava) else "",
            if (seq2 != null) "seq2: " + GraphQLRequestSerializer.getEntry(seq2.asJava) else "",
            if (`new` != null) "new: " + GraphQLRequestSerializer.getEntry(`new`) else "",
            if (enum != null) "enum: " + GraphQLRequestSerializer.getEntry(enum) else "",
            if (createdAfter != null) "createdAfter: " + GraphQLRequestSerializer.getEntry(createdAfter, true) else ""
        ).filter(_ != "").mkString("(", ",", ")")
    }

}