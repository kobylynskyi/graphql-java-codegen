package com.github.graphql

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLRequestSerializer
import SubscriptionState._

@javax.annotation.Generated(
    value = Array("com.kobylynskyi.graphql.codegen.GraphQLCodegen"),
    date = "2020-12-31T23:59:59-0500"
)
case class Commit(
    @javax.validation.constraints.NotNull
    val abbreviatedOid: String,
    @javax.validation.constraints.NotNull
    val additions: java.lang.Integer,
    val associatedPullRequests: PullRequestConnection,
    val author: GitActor,
    @javax.validation.constraints.NotNull
    val authoredByCommitter: java.lang.Boolean,
    @javax.validation.constraints.NotNull
    val authoredDate: String,
    @javax.validation.constraints.NotNull
    val blame: Blame,
    @javax.validation.constraints.NotNull
    val changedFiles: java.lang.Integer,
    @javax.validation.constraints.NotNull
    val comments: CommitCommentConnection,
    @javax.validation.constraints.NotNull
    val commitResourcePath: String,
    @javax.validation.constraints.NotNull
    val commitUrl: String,
    @javax.validation.constraints.NotNull
    val committedDate: String,
    @javax.validation.constraints.NotNull
    val committedViaWeb: java.lang.Boolean,
    val committer: GitActor,
    @javax.validation.constraints.NotNull
    val deletions: java.lang.Integer,
    val deployments: DeploymentConnection,
    @javax.validation.constraints.NotNull
    val history: CommitHistoryConnection,
    @javax.validation.constraints.NotNull
    val id: String,
    @javax.validation.constraints.NotNull
    val message: String,
    @javax.validation.constraints.NotNull
    val messageBody: String,
    @javax.validation.constraints.NotNull
    val messageBodyHTML: String,
    @javax.validation.constraints.NotNull
    val messageHeadline: String,
    @javax.validation.constraints.NotNull
    val messageHeadlineHTML: String,
    @javax.validation.constraints.NotNull
    val oid: String,
    @javax.validation.constraints.NotNull
    val parents: CommitConnection,
    val pushedDate: String,
    @javax.validation.constraints.NotNull
    val repository: Repository,
    @javax.validation.constraints.NotNull
    val resourcePath: String,
    val signature: GitSignature,
    val status: Status,
    @javax.validation.constraints.NotNull
    val tarballUrl: String,
    @javax.validation.constraints.NotNull
    val tree: Tree,
    @javax.validation.constraints.NotNull
    val treeResourcePath: String,
    @javax.validation.constraints.NotNull
    val treeUrl: String,
    @javax.validation.constraints.NotNull
    val url: String,
    @javax.validation.constraints.NotNull
    val viewerCanSubscribe: java.lang.Boolean,
    val viewerSubscription: SubscriptionState,
    @javax.validation.constraints.NotNull
    val zipballUrl: String
) extends Closer with IssueTimelineItem with PullRequestTimelineItem with Subscribable with Node with GitObject with UniformResourceLocatable {

    override def toString(): String = {
        Seq(
            if (abbreviatedOid != null) "abbreviatedOid: " + GraphQLRequestSerializer.getEntry(abbreviatedOid) else "",
            if (additions != null) "additions: " + GraphQLRequestSerializer.getEntry(additions) else "",
            if (associatedPullRequests != null) "associatedPullRequests: " + GraphQLRequestSerializer.getEntry(associatedPullRequests) else "",
            if (author != null) "author: " + GraphQLRequestSerializer.getEntry(author) else "",
            if (authoredByCommitter != null) "authoredByCommitter: " + GraphQLRequestSerializer.getEntry(authoredByCommitter) else "",
            if (authoredDate != null) "authoredDate: " + GraphQLRequestSerializer.getEntry(authoredDate) else "",
            if (blame != null) "blame: " + GraphQLRequestSerializer.getEntry(blame) else "",
            if (changedFiles != null) "changedFiles: " + GraphQLRequestSerializer.getEntry(changedFiles) else "",
            if (comments != null) "comments: " + GraphQLRequestSerializer.getEntry(comments) else "",
            if (commitResourcePath != null) "commitResourcePath: " + GraphQLRequestSerializer.getEntry(commitResourcePath) else "",
            if (commitUrl != null) "commitUrl: " + GraphQLRequestSerializer.getEntry(commitUrl) else "",
            if (committedDate != null) "committedDate: " + GraphQLRequestSerializer.getEntry(committedDate) else "",
            if (committedViaWeb != null) "committedViaWeb: " + GraphQLRequestSerializer.getEntry(committedViaWeb) else "",
            if (committer != null) "committer: " + GraphQLRequestSerializer.getEntry(committer) else "",
            if (deletions != null) "deletions: " + GraphQLRequestSerializer.getEntry(deletions) else "",
            if (deployments != null) "deployments: " + GraphQLRequestSerializer.getEntry(deployments) else "",
            if (history != null) "history: " + GraphQLRequestSerializer.getEntry(history) else "",
            if (id != null) "id: " + GraphQLRequestSerializer.getEntry(id) else "",
            if (message != null) "message: " + GraphQLRequestSerializer.getEntry(message) else "",
            if (messageBody != null) "messageBody: " + GraphQLRequestSerializer.getEntry(messageBody) else "",
            if (messageBodyHTML != null) "messageBodyHTML: " + GraphQLRequestSerializer.getEntry(messageBodyHTML) else "",
            if (messageHeadline != null) "messageHeadline: " + GraphQLRequestSerializer.getEntry(messageHeadline) else "",
            if (messageHeadlineHTML != null) "messageHeadlineHTML: " + GraphQLRequestSerializer.getEntry(messageHeadlineHTML) else "",
            if (oid != null) "oid: " + GraphQLRequestSerializer.getEntry(oid) else "",
            if (parents != null) "parents: " + GraphQLRequestSerializer.getEntry(parents) else "",
            if (pushedDate != null) "pushedDate: " + GraphQLRequestSerializer.getEntry(pushedDate) else "",
            if (repository != null) "repository: " + GraphQLRequestSerializer.getEntry(repository) else "",
            if (resourcePath != null) "resourcePath: " + GraphQLRequestSerializer.getEntry(resourcePath) else "",
            if (signature != null) "signature: " + GraphQLRequestSerializer.getEntry(signature) else "",
            if (status != null) "status: " + GraphQLRequestSerializer.getEntry(status) else "",
            if (tarballUrl != null) "tarballUrl: " + GraphQLRequestSerializer.getEntry(tarballUrl) else "",
            if (tree != null) "tree: " + GraphQLRequestSerializer.getEntry(tree) else "",
            if (treeResourcePath != null) "treeResourcePath: " + GraphQLRequestSerializer.getEntry(treeResourcePath) else "",
            if (treeUrl != null) "treeUrl: " + GraphQLRequestSerializer.getEntry(treeUrl) else "",
            if (url != null) "url: " + GraphQLRequestSerializer.getEntry(url) else "",
            if (viewerCanSubscribe != null) "viewerCanSubscribe: " + GraphQLRequestSerializer.getEntry(viewerCanSubscribe) else "",
            if (viewerSubscription != null) "viewerSubscription: " + GraphQLRequestSerializer.getEntry(viewerSubscription) else "",
            if (zipballUrl != null) "zipballUrl: " + GraphQLRequestSerializer.getEntry(zipballUrl) else ""
        ).filter(_ != "").mkString("{", ",", "}")
    }
}