package com.kobylynskyi.graphql.codegen.prot

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLOperation
import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLOperationRequest
import java.util.{ LinkedHashMap => JLinkedHashMap }
import java.util.{ Map => JMap }
import java.util.Objects

@javax.annotation.Generated(
    value = Array("com.kobylynskyi.graphql.codegen.GraphQLCodegen"),
    date = "2020-12-31T23:59:59-0500"
)
class CaseQueryRequest extends GraphQLOperationRequest {

    private var alias: String = _
    private final lazy val input = new JLinkedHashMap[String, java.lang.Object]()

    def this(alias: String) {
        this()
        this.alias = alias
    }

    def setFinal(Final: Seq[Char] ): Unit = {
        this.input.put("final", Final)
    }

    override def getOperationType(): GraphQLOperation = CaseQueryRequest.OPERATION_TYPE

    override def getOperationName(): String = CaseQueryRequest.OPERATION_NAME

    override def getAlias(): String = if (alias != null) alias else CaseQueryRequest.OPERATION_NAME

    override def getInput(): JMap[String, java.lang.Object] = input

    override def equals(obj: Any): Boolean = {
        if (this == obj) {
            return true
        }
        if (obj == null || getClass != obj.getClass) {
            return false
        }
        val that = obj.asInstanceOf[CaseQueryRequest]
        Objects.equals(getOperationType(), that.getOperationType()) &&
                   Objects.equals(getOperationName(), that.getOperationName()) &&
                   Objects.equals(input, that.input)
    }

    override def hashCode(): Int = Objects.hash(getOperationType(), getOperationName(), input)

    override def toString(): String = Objects.toString(input)
}

object CaseQueryRequest {

    final val OPERATION_NAME: String = "case"
    final val OPERATION_TYPE: GraphQLOperation = GraphQLOperation.QUERY

}