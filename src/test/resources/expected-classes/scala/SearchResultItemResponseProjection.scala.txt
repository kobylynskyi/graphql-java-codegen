package com.github.graphql

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseField
import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseProjection
import java.util.Objects
import scala.collection.mutable.HashMap
import scala.collection.JavaConverters._

/**
 * Response projection for SearchResultItem
 */
@javax.annotation.Generated(
    value = Array("com.kobylynskyi.graphql.codegen.GraphQLCodegen"),
    date = "2020-12-31T23:59:59-0500"
)
class SearchResultItemResponseProjection() extends GraphQLResponseProjection() {

    def this(projection: SearchResultItemResponseProjection) = {
        this()
        if (projection != null) {
            for (field <- projection.fields.values.asScala) {
                add$(field)
            }
        }
    }

    def this(projections: scala.Seq[SearchResultItemResponseProjection]) = {
        this()
        if (projections != null) {
            for (projection <- projections) {
                if (projection != null) {
                    for (field <- projection.fields.values.asScala) {
                        add$(field)
                    }
                }
            }
        }
    }

    private final lazy val projectionDepthOnFields = new HashMap[String, Int]

    def all$(): SearchResultItemResponseProjection = all$(3)

    def all$(maxDepth: Int): SearchResultItemResponseProjection = {
        if (projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.AppResponseProjection.onApp", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.AppResponseProjection.onApp", projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.AppResponseProjection.onApp", 0) + 1)
            this.onApp(new AppResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.AppResponseProjection.onApp", 0)))
        }
        if (projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.RepositoryResponseProjection.onRepository", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.RepositoryResponseProjection.onRepository", projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.RepositoryResponseProjection.onRepository", 0) + 1)
            this.onRepository(new RepositoryResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.RepositoryResponseProjection.onRepository", 0)))
        }
        if (projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.IssueResponseProjection.onIssue", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.IssueResponseProjection.onIssue", projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.IssueResponseProjection.onIssue", 0) + 1)
            this.onIssue(new IssueResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.IssueResponseProjection.onIssue", 0)))
        }
        if (projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.OrganizationResponseProjection.onOrganization", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.OrganizationResponseProjection.onOrganization", projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.OrganizationResponseProjection.onOrganization", 0) + 1)
            this.onOrganization(new OrganizationResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.OrganizationResponseProjection.onOrganization", 0)))
        }
        if (projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.UserResponseProjection.onUser", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.UserResponseProjection.onUser", projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.UserResponseProjection.onUser", 0) + 1)
            this.onUser(new UserResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.UserResponseProjection.onUser", 0)))
        }
        if (projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.MarketplaceListingResponseProjection.onMarketplaceListing", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.MarketplaceListingResponseProjection.onMarketplaceListing", projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.MarketplaceListingResponseProjection.onMarketplaceListing", 0) + 1)
            this.onMarketplaceListing(new MarketplaceListingResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.MarketplaceListingResponseProjection.onMarketplaceListing", 0)))
        }
        if (projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.PullRequestResponseProjection.onPullRequest", 0) <= maxDepth) {
            projectionDepthOnFields.put("SearchResultItemResponseProjection.PullRequestResponseProjection.onPullRequest", projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.PullRequestResponseProjection.onPullRequest", 0) + 1)
            this.onPullRequest(new PullRequestResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrElse("SearchResultItemResponseProjection.PullRequestResponseProjection.onPullRequest", 0)))
        }
        this.typename()
        this
    }

    def onApp(subProjection: AppResponseProjection): SearchResultItemResponseProjection = {
        onApp(null.asInstanceOf[String], subProjection)
    }

    def onApp(alias: String, subProjection: AppResponseProjection): SearchResultItemResponseProjection = {
        add$(new GraphQLResponseField("...on App").alias(alias).projection(subProjection))
        this
    }

    def onRepository(subProjection: RepositoryResponseProjection): SearchResultItemResponseProjection = {
        onRepository(null.asInstanceOf[String], subProjection)
    }

    def onRepository(alias: String, subProjection: RepositoryResponseProjection): SearchResultItemResponseProjection = {
        add$(new GraphQLResponseField("...on Repository").alias(alias).projection(subProjection))
        this
    }

    def onIssue(subProjection: IssueResponseProjection): SearchResultItemResponseProjection = {
        onIssue(null.asInstanceOf[String], subProjection)
    }

    def onIssue(alias: String, subProjection: IssueResponseProjection): SearchResultItemResponseProjection = {
        add$(new GraphQLResponseField("...on Issue").alias(alias).projection(subProjection))
        this
    }

    def onOrganization(subProjection: OrganizationResponseProjection): SearchResultItemResponseProjection = {
        onOrganization(null.asInstanceOf[String], subProjection)
    }

    def onOrganization(alias: String, subProjection: OrganizationResponseProjection): SearchResultItemResponseProjection = {
        add$(new GraphQLResponseField("...on Organization").alias(alias).projection(subProjection))
        this
    }

    def onUser(subProjection: UserResponseProjection): SearchResultItemResponseProjection = {
        onUser(null.asInstanceOf[String], subProjection)
    }

    def onUser(alias: String, subProjection: UserResponseProjection): SearchResultItemResponseProjection = {
        add$(new GraphQLResponseField("...on User").alias(alias).projection(subProjection))
        this
    }

    def onMarketplaceListing(subProjection: MarketplaceListingResponseProjection): SearchResultItemResponseProjection = {
        onMarketplaceListing(null.asInstanceOf[String], subProjection)
    }

    def onMarketplaceListing(alias: String, subProjection: MarketplaceListingResponseProjection): SearchResultItemResponseProjection = {
        add$(new GraphQLResponseField("...on MarketplaceListing").alias(alias).projection(subProjection))
        this
    }

    def onPullRequest(subProjection: PullRequestResponseProjection): SearchResultItemResponseProjection = {
        onPullRequest(null.asInstanceOf[String], subProjection)
    }

    def onPullRequest(alias: String, subProjection: PullRequestResponseProjection): SearchResultItemResponseProjection = {
        add$(new GraphQLResponseField("...on PullRequest").alias(alias).projection(subProjection))
        this
    }

    def typename(): SearchResultItemResponseProjection = {
        typename(null.asInstanceOf[String])
    }

    def typename(alias: String): SearchResultItemResponseProjection = {
        add$(new GraphQLResponseField("__typename").alias(alias))
        this
    }

    override def deepCopy$(): SearchResultItemResponseProjection = new SearchResultItemResponseProjection(this)

    override def equals(obj: Any): Boolean = {
        if (this == obj) {
            return true
        }
        if (obj == null || getClass != obj.getClass) {
            return false
        }
        val that = obj.asInstanceOf[SearchResultItemResponseProjection]
        Objects.equals(fields, that.fields)
    }

    override def hashCode(): Int = Objects.hash(fields)

}