@javax.annotation.Generated(
    value = "com.kobylynskyi.graphql.codegen.GraphQLCodegen",
    date = "2020-12-31T23:59:59-0500"
)
public interface QueryResolver {

    java.util.Optional<CodeOfConduct> codeOfConduct(@javax.validation.constraints.NotNull String key) throws Exception;

    java.util.List<CodeOfConduct> codesOfConduct() throws Exception;

    java.util.Optional<License> license(@javax.validation.constraints.NotNull String key) throws Exception;

    @javax.validation.constraints.NotNull
    java.util.List<License> licenses() throws Exception;

    @javax.validation.constraints.NotNull
    java.util.List<MarketplaceCategory> marketplaceCategories(Boolean excludeEmpty, Boolean excludeSubcategories, java.util.List<String> includeCategories) throws Exception;

    java.util.Optional<MarketplaceCategory> marketplaceCategory(@javax.validation.constraints.NotNull String slug, Boolean useTopicAliases) throws Exception;

    java.util.Optional<MarketplaceListing> marketplaceListing(@javax.validation.constraints.NotNull String slug) throws Exception;

    @javax.validation.constraints.NotNull
    MarketplaceListingConnection marketplaceListings(String adminId, String after, Boolean allStates, String before, String categorySlug, Integer first, Integer last, String organizationId, Boolean primaryCategoryOnly, java.util.List<String> slugs, Boolean useTopicAliases, Boolean viewerCanAdmin, Boolean withFreeTrialsOnly) throws Exception;

    @javax.validation.constraints.NotNull
    GitHubMetadata meta() throws Exception;

    java.util.Optional<Node> node(@javax.validation.constraints.NotNull String id) throws Exception;

    @javax.validation.constraints.NotNull
    java.util.List<Node> nodes(@javax.validation.constraints.NotNull java.util.List<String> ids) throws Exception;

    java.util.Optional<Organization> organization(@javax.validation.constraints.NotNull String login) throws Exception;

    java.util.Optional<RateLimit> rateLimit(Boolean dryRun) throws Exception;

    @javax.validation.constraints.NotNull
    Query relay() throws Exception;

    java.util.Optional<Repository> repository(@javax.validation.constraints.NotNull String name, @javax.validation.constraints.NotNull String owner) throws Exception;

    java.util.Optional<RepositoryOwner> repositoryOwner(@javax.validation.constraints.NotNull String login) throws Exception;

    java.util.Optional<UniformResourceLocatable> resource(@javax.validation.constraints.NotNull String url) throws Exception;

    @javax.validation.constraints.NotNull
    SearchResultItemConnection search(String after, String before, Integer first, Integer last, @javax.validation.constraints.NotNull String query, @javax.validation.constraints.NotNull SearchType type) throws Exception;

    @javax.validation.constraints.NotNull
    SecurityAdvisoryConnection securityAdvisories(String after, String before, Integer first, SecurityAdvisoryIdentifierFilter identifier, Integer last, SecurityAdvisoryOrder orderBy, String publishedSince, String updatedSince) throws Exception;

    java.util.Optional<SecurityAdvisory> securityAdvisory(@javax.validation.constraints.NotNull String ghsaId) throws Exception;

    @javax.validation.constraints.NotNull
    SecurityVulnerabilityConnection securityVulnerabilities(String after, String before, SecurityAdvisoryEcosystem ecosystem, Integer first, Integer last, SecurityVulnerabilityOrder orderBy, String Package, java.util.List<SecurityAdvisorySeverity> severities) throws Exception;

    java.util.Optional<SponsorsListing> sponsorsListing(@javax.validation.constraints.NotNull String slug) throws Exception;

    java.util.Optional<Topic> topic(@javax.validation.constraints.NotNull String name) throws Exception;

    java.util.Optional<User> user(@javax.validation.constraints.NotNull String login) throws Exception;

    @javax.validation.constraints.NotNull
    User viewer() throws Exception;

}