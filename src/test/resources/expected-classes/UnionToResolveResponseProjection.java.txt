import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseField;
import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseProjection;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

/**
 * Response projection for UnionToResolve
 */
@javax.annotation.Generated(
    value = "com.kobylynskyi.graphql.codegen.GraphQLCodegen",
    date = "2020-12-31T23:59:59-0500"
)
public class UnionToResolveResponseProjection extends GraphQLResponseProjection {

    private final Map<String, Integer> projectionDepthOnFields = new HashMap<>();

    public UnionToResolveResponseProjection() {
    }

    public UnionToResolveResponseProjection(UnionToResolveResponseProjection projection) {
        super(projection);
    }

    public UnionToResolveResponseProjection(List<UnionToResolveResponseProjection> projections) {
        super(projections);
    }

    public UnionToResolveResponseProjection all$() {
        return all$(3);
    }

    public UnionToResolveResponseProjection all$(int maxDepth) {
        if (projectionDepthOnFields.getOrDefault("UnionToResolveResponseProjection.UnionMemberAResponseProjection.onUnionMemberA", 0) <= maxDepth) {
            projectionDepthOnFields.put("UnionToResolveResponseProjection.UnionMemberAResponseProjection.onUnionMemberA", projectionDepthOnFields.getOrDefault("UnionToResolveResponseProjection.UnionMemberAResponseProjection.onUnionMemberA", 0) + 1);
            this.onUnionMemberA(new UnionMemberAResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrDefault("UnionToResolveResponseProjection.UnionMemberAResponseProjection.onUnionMemberA", 0)));
        }
        if (projectionDepthOnFields.getOrDefault("UnionToResolveResponseProjection.UnionMemberBResponseProjection.onUnionMemberB", 0) <= maxDepth) {
            projectionDepthOnFields.put("UnionToResolveResponseProjection.UnionMemberBResponseProjection.onUnionMemberB", projectionDepthOnFields.getOrDefault("UnionToResolveResponseProjection.UnionMemberBResponseProjection.onUnionMemberB", 0) + 1);
            this.onUnionMemberB(new UnionMemberBResponseProjection().all$(maxDepth - projectionDepthOnFields.getOrDefault("UnionToResolveResponseProjection.UnionMemberBResponseProjection.onUnionMemberB", 0)));
        }
        this.typename();
        return this;
    }

    public UnionToResolveResponseProjection onUnionMemberA(UnionMemberAResponseProjection subProjection) {
        return onUnionMemberA(null, subProjection);
    }

    public UnionToResolveResponseProjection onUnionMemberA(String alias, UnionMemberAResponseProjection subProjection) {
        add$(new GraphQLResponseField("...on UnionMemberA").alias(alias).projection(subProjection));
        return this;
    }

    public UnionToResolveResponseProjection onUnionMemberB(UnionMemberBResponseProjection subProjection) {
        return onUnionMemberB(null, subProjection);
    }

    public UnionToResolveResponseProjection onUnionMemberB(String alias, UnionMemberBResponseProjection subProjection) {
        add$(new GraphQLResponseField("...on UnionMemberB").alias(alias).projection(subProjection));
        return this;
    }

    public UnionToResolveResponseProjection typename() {
        return typename(null);
    }

    public UnionToResolveResponseProjection typename(String alias) {
        add$(new GraphQLResponseField("__typename").alias(alias));
        return this;
    }

    @Override
    public UnionToResolveResponseProjection deepCopy$() {
        return new UnionToResolveResponseProjection(this);
    }


}
