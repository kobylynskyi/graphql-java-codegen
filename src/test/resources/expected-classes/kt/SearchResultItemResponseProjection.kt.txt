package com.github.graphql

import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseField
import com.kobylynskyi.graphql.codegen.model.graphql.GraphQLResponseProjection
import java.util.Objects

/**
 * Response projection for SearchResultItem
 */
@javax.annotation.Generated(
    value = ["com.kobylynskyi.graphql.codegen.GraphQLCodegen"],
    date = "2020-12-31T23:59:59-0500"
)
open class SearchResultItemResponseProjection : GraphQLResponseProjection {

    constructor(): super()

    constructor(projection: SearchResultItemResponseProjection): super(projection)

    constructor(projections: List<SearchResultItemResponseProjection>): super(projections)

    private val projectionDepthOnFields: MutableMap<String, Int> by lazy { mutableMapOf<String, Int>() }

    fun `all$`(): SearchResultItemResponseProjection = `all$`(3)

    fun `all$`(maxDepth: Int): SearchResultItemResponseProjection {
        this.typename()
        return this
    }

    fun onApp(subProjection: AppResponseProjection): SearchResultItemResponseProjection = onApp(null, subProjection)

    fun onApp(alias: String?, subProjection: AppResponseProjection): SearchResultItemResponseProjection {
        `add$`(GraphQLResponseField("...on App").alias(alias).projection(subProjection))
        return this
    }

    fun onRepository(subProjection: RepositoryResponseProjection): SearchResultItemResponseProjection = onRepository(null, subProjection)

    fun onRepository(alias: String?, subProjection: RepositoryResponseProjection): SearchResultItemResponseProjection {
        `add$`(GraphQLResponseField("...on Repository").alias(alias).projection(subProjection))
        return this
    }

    fun onIssue(subProjection: IssueResponseProjection): SearchResultItemResponseProjection = onIssue(null, subProjection)

    fun onIssue(alias: String?, subProjection: IssueResponseProjection): SearchResultItemResponseProjection {
        `add$`(GraphQLResponseField("...on Issue").alias(alias).projection(subProjection))
        return this
    }

    fun onOrganization(subProjection: OrganizationResponseProjection): SearchResultItemResponseProjection = onOrganization(null, subProjection)

    fun onOrganization(alias: String?, subProjection: OrganizationResponseProjection): SearchResultItemResponseProjection {
        `add$`(GraphQLResponseField("...on Organization").alias(alias).projection(subProjection))
        return this
    }

    fun onUser(subProjection: UserResponseProjection): SearchResultItemResponseProjection = onUser(null, subProjection)

    fun onUser(alias: String?, subProjection: UserResponseProjection): SearchResultItemResponseProjection {
        `add$`(GraphQLResponseField("...on User").alias(alias).projection(subProjection))
        return this
    }

    fun onMarketplaceListing(subProjection: MarketplaceListingResponseProjection): SearchResultItemResponseProjection = onMarketplaceListing(null, subProjection)

    fun onMarketplaceListing(alias: String?, subProjection: MarketplaceListingResponseProjection): SearchResultItemResponseProjection {
        `add$`(GraphQLResponseField("...on MarketplaceListing").alias(alias).projection(subProjection))
        return this
    }

    fun onPullRequest(subProjection: PullRequestResponseProjection): SearchResultItemResponseProjection = onPullRequest(null, subProjection)

    fun onPullRequest(alias: String?, subProjection: PullRequestResponseProjection): SearchResultItemResponseProjection {
        `add$`(GraphQLResponseField("...on PullRequest").alias(alias).projection(subProjection))
        return this
    }

    fun typename(): SearchResultItemResponseProjection = typename(null)

    fun typename(alias: String?): SearchResultItemResponseProjection {
        `add$`(GraphQLResponseField("__typename").alias(alias))
        return this
    }

    override fun `deepCopy$`(): SearchResultItemResponseProjection = SearchResultItemResponseProjection(this)

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null || javaClass != other.javaClass) {
            return false
        }
        val that = other as SearchResultItemResponseProjection
        return Objects.equals(fields, that.fields)
    }

    override fun hashCode(): Int = Objects.hash(fields)

}