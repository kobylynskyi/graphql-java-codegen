# A GraphQL schema provides a root type for each kind of operation.
schema {
    query: Query
    mutation: Mutation
}

type Query

type Mutation

type Event

input EventInput

enum Status

interface Node

union PinnableItem






extend type Query {
    events: [Event!]
}

extend type Mutation {
    createEvent(input: EventInput!): Event!
}

extend type Event implements Node {
    status: Status!
    createdDateTime: DateTime!
}

extend input EventInput {
    status: Status!
}

extend enum Status {
    CREATED
    IN_PROGRESS
}

extend interface Node {
    id: ID!
}

extend union PinnableItem = Event

scalar DateTime



extend type Query {
    assets: [Asset!]
}

extend type Mutation {
    createAsset(input: AssetInput!): Asset!
}

type Asset implements Node {
    name: String!
    status: Status!
}

input AssetInput {
    name: String!
}

extend type Event {
    # Optional list of assets
    assets: [Asset!]
}

extend input EventInput {
    assets: [AssetInput!]
}

extend enum Status {
    ASSIGNED
}

extend interface Node {
    createdBy: String
}

extend union PinnableItem = Asset

extend scalar DateTime @javaType(name: "java.util.Date")

